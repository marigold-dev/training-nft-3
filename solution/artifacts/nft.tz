{ parameter
    (or (pair %buy nat address)
        (or (pair %sell nat nat)
            (or (pair %mint nat bytes bytes bytes bytes)
                (or (list %update_operators
                       (or (pair %add_operator (address %owner) (address %operator) (nat %token_id))
                           (pair %remove_operator (address %owner) (address %operator) (nat %token_id))))
                    (or (pair %balance_of
                           (list %requests (pair (address %owner) (nat %token_id)))
                           (contract %callback
                              (list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance)))))
                        (list %transfer
                           (pair (address %from_) (list %txs (pair (address %to_) (nat %token_id) (nat %amount)))))))))) ;
  storage
    (pair (set %administrators address)
          (nat %totalSupply)
          (map %offers address (pair (nat %quantity) (nat %price)))
          (big_map %ledger address nat)
          (big_map %metadata string bytes)
          (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))
          (big_map %operators address (set address))) ;
  code { LAMBDA
           address
           unit
           { PUSH string "The sender can only manage operators for his own token" ;
             SENDER ;
             DIG 2 ;
             COMPARE ;
             EQ ;
             IF { DROP ; UNIT } { FAILWITH } } ;
         LAMBDA
           (pair (lambda address unit) (pair (big_map address (set address)) address address))
           (big_map address (set address))
           { UNPAIR ;
             SWAP ;
             UNPAIR 3 ;
             DUP 3 ;
             DUP 3 ;
             COMPARE ;
             EQ ;
             IF { SWAP ; DIG 2 ; DIG 3 ; DROP 3 }
                { DUP 2 ;
                  DIG 4 ;
                  SWAP ;
                  EXEC ;
                  DROP ;
                  DUP ;
                  DUP 3 ;
                  GET ;
                  IF_NONE { EMPTY_SET address } {} ;
                  DIG 3 ;
                  PUSH bool True ;
                  SWAP ;
                  UPDATE ;
                  SOME ;
                  DIG 2 ;
                  UPDATE } } ;
         DUP 2 ;
         APPLY ;
         LAMBDA
           (pair (big_map address nat) address)
           nat
           { UNPAIR ; SWAP ; GET ; IF_NONE { PUSH nat 0 } {} } ;
         LAMBDA
           (pair (big_map address nat) address nat)
           (big_map address nat)
           { UNPAIR 3 ; DIG 2 ; SOME ; DIG 2 ; UPDATE } ;
         LAMBDA
           (pair (pair (lambda (pair (big_map address nat) address nat) (big_map address nat))
                       (lambda (pair (big_map address nat) address) nat))
                 (pair (big_map address nat) address nat))
           (big_map address nat)
           { UNPAIR ;
             UNPAIR ;
             DIG 2 ;
             UNPAIR 3 ;
             DUP 2 ;
             DUP 2 ;
             PAIR ;
             DIG 5 ;
             SWAP ;
             EXEC ;
             PUSH string "FA2_INSUFFICIENT_BALANCE" ;
             DUP 5 ;
             DUP 3 ;
             COMPARE ;
             GE ;
             IF { DROP } { FAILWITH } ;
             DIG 3 ;
             SWAP ;
             SUB ;
             ABS ;
             DUG 2 ;
             PAIR 3 ;
             EXEC } ;
         DUP 3 ;
         DUP 3 ;
         PAIR ;
         APPLY ;
         LAMBDA
           (pair (pair (lambda (pair (big_map address nat) address nat) (big_map address nat))
                       (lambda (pair (big_map address nat) address) nat))
                 (pair (big_map address nat) address nat))
           (big_map address nat)
           { UNPAIR ;
             UNPAIR ;
             DIG 2 ;
             UNPAIR 3 ;
             DUP 2 ;
             DUP 2 ;
             PAIR ;
             DIG 5 ;
             SWAP ;
             EXEC ;
             DIG 3 ;
             ADD ;
             DUG 2 ;
             PAIR 3 ;
             EXEC } ;
         DUP 4 ;
         DUP 4 ;
         PAIR ;
         APPLY ;
         DIG 2 ;
         DROP ;
         LAMBDA
           (pair (lambda (pair (big_map address nat) address) nat)
                 (pair (pair (big_map address nat)
                             (big_map address (set address))
                             (big_map nat (pair nat (map string bytes)))
                             (big_map string bytes))
                       address))
           nat
           { UNPAIR ; SWAP ; UNPAIR ; CAR ; PAIR ; EXEC } ;
         DUP 4 ;
         APPLY ;
         DIG 3 ;
         DROP ;
         DIG 5 ;
         UNPAIR ;
         IF_LEFT
           { DIG 2 ;
             DIG 5 ;
             DIG 6 ;
             DROP 3 ;
             UNPAIR ;
             DUP 3 ;
             GET 5 ;
             DUP 3 ;
             GET ;
             IF_NONE
               { DROP 5 ; PUSH string "3" ; FAILWITH }
               { DUP ;
                 CAR ;
                 DUP 3 ;
                 COMPARE ;
                 GT ;
                 IF { DROP 6 ; PUSH string "4" ; FAILWITH }
                    { PUSH mutez 1 ;
                      DUP 3 ;
                      DUP 3 ;
                      CDR ;
                      MUL ;
                      MUL ;
                      AMOUNT ;
                      COMPARE ;
                      LT ;
                      IF { DROP 6 ; PUSH string "5" ; FAILWITH }
                         { DUP 3 ;
                           CONTRACT unit ;
                           IF_NONE { PUSH string "6" ; FAILWITH } {} ;
                           PUSH mutez 1 ;
                           DUP 4 ;
                           DUP 4 ;
                           CDR ;
                           MUL ;
                           MUL ;
                           UNIT ;
                           TRANSFER_TOKENS ;
                           DUP 3 ;
                           DUP 5 ;
                           DUP 7 ;
                           GET 7 ;
                           PAIR 3 ;
                           DIG 7 ;
                           SWAP ;
                           EXEC ;
                           DUP 4 ;
                           SOURCE ;
                           DIG 2 ;
                           PAIR 3 ;
                           DIG 6 ;
                           SWAP ;
                           EXEC ;
                           DUP 3 ;
                           DIG 4 ;
                           DIG 4 ;
                           CAR ;
                           SUB ;
                           ABS ;
                           UPDATE 1 ;
                           DUP 5 ;
                           DIG 5 ;
                           GET 5 ;
                           DIG 2 ;
                           SOME ;
                           DIG 5 ;
                           UPDATE ;
                           UPDATE 5 ;
                           SWAP ;
                           UPDATE 7 ;
                           NIL operation ;
                           DIG 2 ;
                           CONS ;
                           PAIR } } } }
           { IF_LEFT
               { DIG 3 ;
                 DIG 4 ;
                 DIG 6 ;
                 DROP 3 ;
                 UNPAIR ;
                 SOURCE ;
                 DUP 4 ;
                 GET 9 ;
                 DUP 5 ;
                 GET 11 ;
                 DUP 6 ;
                 GET 12 ;
                 DUP 7 ;
                 GET 7 ;
                 PAIR 4 ;
                 PAIR ;
                 DIG 4 ;
                 SWAP ;
                 EXEC ;
                 DUP 2 ;
                 COMPARE ;
                 GT ;
                 IF { DROP 4 ; PUSH string "2" ; FAILWITH }
                    { SELF_ADDRESS ;
                      SOURCE ;
                      DUP 5 ;
                      GET 12 ;
                      PAIR 3 ;
                      DIG 4 ;
                      SWAP ;
                      EXEC ;
                      DUP 4 ;
                      DIG 4 ;
                      GET 5 ;
                      DIG 4 ;
                      DIG 4 ;
                      PAIR ;
                      SOURCE ;
                      SWAP ;
                      SOME ;
                      SWAP ;
                      UPDATE ;
                      UPDATE 5 ;
                      SWAP ;
                      UPDATE 12 ;
                      NIL operation ;
                      PAIR } }
               { IF_LEFT
                   { DIG 2 ;
                     DIG 3 ;
                     DIG 4 ;
                     DIG 5 ;
                     DIG 6 ;
                     DROP 5 ;
                     UNPAIR 5 ;
                     PUSH nat 0 ;
                     DUP 2 ;
                     COMPARE ;
                     LE ;
                     IF { DROP 6 ; PUSH string "0" ; FAILWITH }
                        { DUP 6 ;
                          CAR ;
                          SENDER ;
                          MEM ;
                          NOT ;
                          IF { DROP 6 ; PUSH string "1" ; FAILWITH }
                             { DUP 6 ;
                               DUP 2 ;
                               UPDATE 3 ;
                               EMPTY_BIG_MAP address nat ;
                               DIG 2 ;
                               SOME ;
                               SENDER ;
                               UPDATE ;
                               UPDATE 7 ;
                               DIG 5 ;
                               GET 11 ;
                               EMPTY_MAP string bytes ;
                               PUSH bytes 0x30 ;
                               SOME ;
                               PUSH string "decimals" ;
                               UPDATE ;
                               DIG 5 ;
                               SOME ;
                               PUSH string "symbol" ;
                               UPDATE ;
                               DIG 5 ;
                               SOME ;
                               PUSH string "thumbnailUri" ;
                               UPDATE ;
                               PUSH bytes 0x5b22545a49502d3132225d ;
                               SOME ;
                               PUSH string "interfaces" ;
                               UPDATE ;
                               DIG 4 ;
                               SOME ;
                               PUSH string "description" ;
                               UPDATE ;
                               DIG 3 ;
                               SOME ;
                               PUSH string "name" ;
                               UPDATE ;
                               PUSH nat 0 ;
                               PAIR ;
                               SOME ;
                               PUSH nat 0 ;
                               UPDATE ;
                               UPDATE 11 ;
                               EMPTY_BIG_MAP address (set address) ;
                               UPDATE 12 ;
                               NIL operation ;
                               PAIR } } }
                   { IF_LEFT
                       { DIG 2 ;
                         DIG 3 ;
                         DIG 4 ;
                         DROP 3 ;
                         DUP 2 ;
                         GET 9 ;
                         DUP 3 ;
                         GET 11 ;
                         DUP 4 ;
                         GET 12 ;
                         DUP 5 ;
                         GET 7 ;
                         PAIR 4 ;
                         DUP ;
                         GET 3 ;
                         DIG 2 ;
                         ITER { IF_LEFT
                                  { DUP ; GET 3 ; SWAP ; CAR ; DIG 2 ; PAIR 3 ; DUP 4 ; SWAP ; EXEC }
                                  { DUP ;
                                    GET 3 ;
                                    SWAP ;
                                    CAR ;
                                    DUP 2 ;
                                    DUP 2 ;
                                    COMPARE ;
                                    EQ ;
                                    IF { DROP 2 }
                                       { DUP ;
                                         DUP 8 ;
                                         SWAP ;
                                         EXEC ;
                                         DROP ;
                                         DUP 3 ;
                                         DIG 3 ;
                                         DUP 3 ;
                                         GET ;
                                         IF_NONE
                                           { DIG 2 ; DROP ; NONE (set address) }
                                           { PUSH nat 0 ;
                                             DUP 2 ;
                                             DUP 6 ;
                                             PUSH bool False ;
                                             SWAP ;
                                             UPDATE ;
                                             SIZE ;
                                             COMPARE ;
                                             EQ ;
                                             IF { DIG 3 ; DROP 2 ; NONE (set address) }
                                                { DIG 3 ; PUSH bool False ; SWAP ; UPDATE ; SOME } } ;
                                         DIG 2 ;
                                         UPDATE } } } ;
                         DIG 3 ;
                         DIG 4 ;
                         DROP 2 ;
                         UPDATE 3 ;
                         NIL operation ;
                         PAIR ;
                         SWAP ;
                         DUP 2 ;
                         CDR ;
                         CAR ;
                         UPDATE 7 ;
                         DUP 2 ;
                         CDR ;
                         GET 6 ;
                         UPDATE 9 ;
                         DUP 2 ;
                         CDR ;
                         GET 5 ;
                         UPDATE 11 ;
                         DUP 2 ;
                         CDR ;
                         GET 3 ;
                         UPDATE 12 ;
                         SWAP ;
                         CAR }
                       { DIG 5 ;
                         DIG 6 ;
                         DROP 2 ;
                         IF_LEFT
                           { DIG 3 ;
                             DIG 4 ;
                             DROP 2 ;
                             DUP 2 ;
                             GET 9 ;
                             DUP 3 ;
                             GET 11 ;
                             DUP 4 ;
                             GET 12 ;
                             DUP 5 ;
                             GET 7 ;
                             PAIR 4 ;
                             SWAP ;
                             UNPAIR ;
                             MAP { DUP ; CAR ; DUP 4 ; PAIR ; DUP 6 ; SWAP ; EXEC ; SWAP ; PAIR } ;
                             DIG 4 ;
                             DROP ;
                             SWAP ;
                             PUSH mutez 0 ;
                             DIG 2 ;
                             TRANSFER_TOKENS ;
                             SWAP ;
                             NIL operation ;
                             DIG 2 ;
                             CONS ;
                             PAIR ;
                             SWAP ;
                             DUP 2 ;
                             CDR ;
                             CAR ;
                             UPDATE 7 ;
                             DUP 2 ;
                             CDR ;
                             GET 6 ;
                             UPDATE 9 ;
                             DUP 2 ;
                             CDR ;
                             GET 5 ;
                             UPDATE 11 ;
                             DUP 2 ;
                             CDR ;
                             GET 3 ;
                             UPDATE 12 ;
                             SWAP ;
                             CAR }
                           { DIG 2 ;
                             DROP ;
                             DUP 2 ;
                             GET 9 ;
                             DUP 3 ;
                             GET 11 ;
                             DUP 4 ;
                             GET 12 ;
                             DUP 5 ;
                             GET 7 ;
                             PAIR 4 ;
                             DUP ;
                             CAR ;
                             DIG 2 ;
                             ITER { UNPAIR ;
                                    DUG 2 ;
                                    ITER { UNPAIR 3 ;
                                           SWAP ;
                                           DROP ;
                                           SENDER ;
                                           DUP 5 ;
                                           DUP 2 ;
                                           COMPARE ;
                                           EQ ;
                                           IF { DROP }
                                              { DUP 6 ;
                                                GET 3 ;
                                                DUP 6 ;
                                                GET ;
                                                IF_NONE { EMPTY_SET address } {} ;
                                                SWAP ;
                                                MEM ;
                                                IF {} { PUSH string "FA2_NOT_OPERATOR" ; FAILWITH } } ;
                                           DUP 2 ;
                                           DUP 5 ;
                                           DIG 4 ;
                                           PAIR 3 ;
                                           DUP 8 ;
                                           SWAP ;
                                           EXEC ;
                                           PAIR 3 ;
                                           DUP 5 ;
                                           SWAP ;
                                           EXEC } ;
                                    SWAP ;
                                    DROP } ;
                             DIG 3 ;
                             DIG 4 ;
                             DROP 2 ;
                             UPDATE 1 ;
                             NIL operation ;
                             PAIR ;
                             SWAP ;
                             DUP 2 ;
                             CDR ;
                             CAR ;
                             UPDATE 7 ;
                             DUP 2 ;
                             CDR ;
                             GET 6 ;
                             UPDATE 9 ;
                             DUP 2 ;
                             CDR ;
                             GET 5 ;
                             UPDATE 11 ;
                             DUP 2 ;
                             CDR ;
                             GET 3 ;
                             UPDATE 12 ;
                             SWAP ;
                             CAR } } ;
                     PAIR } } } } }

